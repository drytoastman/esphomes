wifi: !include wifi.yaml

substitutions:
  name: tagreader
  friendly_name: TagReader

esphome:
  name: $name
  platform: ESP8266
  board: d1_mini

  project:
    name: drytoastman.tag_reader
    version: "1.0"
  on_boot:
    priority: -10
    then:
    - wait_until:
        api.connected:
    - logger.log: API is connected!
    - rtttl.play: "success:d=32,o=5,b=100:c,g,b"
    - light.turn_on: { id: activity_led, brightness: 30%, red: 0%, green: 0%, blue: 100% }

# Define buttons for writing tags via HA
button:
  - platform: restart
    name: "${friendly_name} Restart"
    entity_category: config

# Enable logging
logger:
  # level: VERY_VERBOSE
  # level: VERBOSE

# Enable Home Assistant API
api:
  services:
  - service: rfidreader_tag_ok
    then:
    - rtttl.play: "upbeep:d=8,o=5,b=100:16g,b"
    - light.turn_on: { id: activity_led, brightness: 100%, red: 0%, green: 100%, blue: 0%, flash_length: 750ms }

  - service: rfidreader_tag_ko
    then:
    - rtttl.play: "downbeep:d=8,o=5,b=100:16b,b4"
    - light.turn_on: { id: activity_led, brightness: 100%, red: 100%, green: 0%, blue: 0%, flash_length: 750ms }

  - service: play_rtttl
    variables:
      song_str: string
    then:
    - rtttl.play: !lambda 'return song_str;'

  - service: write_tag_id
    variables:
      tag_id: string
    then:
    - light.turn_on: { id: activity_led, brightness: 100%, red: 100%, green: 0%, blue: 0% }
    - lambda: |-
        auto message = new nfc::NdefMessage();
        std::string uri = "https://www.home-assistant.io/tag/";
        uri += tag_id;
        message->add_uri_record(uri);
        id(pn532_board).write_mode(message);
    - rtttl.play: "writestart:d=16,o=5,b=100:b"
    - wait_until: { not: { pn532.is_writing: }}
    - light.turn_on: { id: activity_led, brightness: 30%, red: 0%, green: 0%, blue: 100% }
    - rtttl.play: "writedone:d=16,o=5,b=100:g,32_,b"

  - service: cancel_write
    then:
    - lambda: 'id(pn532_board).read_mode();'
    - light.turn_on: { id: activity_led, brightness: 30%, red: 0%, green: 0%, blue: 100% }
    - rtttl.play: "writestop:d=16,o=5,b=100:b,32_,g"

# Enable OTA upgrade
ota:

i2c:
  scan: False
  frequency: 400kHz

globals:
  - id: source
    type: std::string
  - id: url
    type: std::string
  - id: info
    type: std::string

pn532_i2c:
  id: pn532_board
  on_tag:
    then:
    - delay: 0.05s # to fix slow component

    - lambda: |-
        id(source)="";
        id(url)="";
        id(info)="";
        if (tag.has_ndef_message()) {
          auto message = tag.get_ndef_message();
          auto records = message->get_records();
          for (auto &record : records) {
            std::string payload = record->get_payload();
            std::string type = record->get_type();
            size_t hass = payload.find("https://www.home-assistant.io/tag/");

            if (type == "U" and hass != std::string::npos ) {
              ESP_LOGD("tagreader", "Found Home Assistant tag NDEF");
              id(source)="hass";
              id(url)=payload;
              id(info)=payload.substr(hass + 34);
            }
            else if ( id(source)=="" ) {
              id(source)="uid";
            }
          }
        }
        else {
          id(source)="uid";
        }

    - rtttl.play: "scanned:d=8,o=5,b=100:g"
    - if:
        condition:
          lambda: 'return ( id(source)=="hass" );'
        then:
          - homeassistant.tag_scanned: !lambda 'return id(info);'
        else:
          - homeassistant.tag_scanned: !lambda |-
              ESP_LOGD("tagreader", "No HA NDEF, using UID");
              return x;


# Define the buzzer output
output:
- platform: esp8266_pwm
  pin: D7
  id: buzzer

binary_sensor:
  - platform: status
    name: "${friendly_name} Status"
    entity_category: diagnostic

text_sensor:
  - platform: version
    hide_timestamp: true
    name: "${friendly_name} ESPHome Version"
    entity_category: diagnostic
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
      icon: mdi:wifi
      entity_category: diagnostic
    ssid:
      name: "${friendly_name} Connected SSID"
      icon: mdi:wifi-strength-2
      entity_category: diagnostic

# Define buzzer as output for RTTTL
rtttl:
  output: buzzer

# Configure LED
light:
- platform: neopixelbus
  variant: WS2812
  pin: D8
  num_leds: 1
  flash_transition_length: 500ms
  type: GRB
  id: activity_led
  name: "${friendly_name} LED"
  restore_mode: ALWAYS_OFF

switch:
  - platform: gpio
    id: relay
    name: "Relay Switch"
    pin: D6
